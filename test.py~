# -*- coding: utf-8 -*-
import math
import random
import string
from Garbled_circuits import *
import sys
import re
import os
from Crypto.Cipher import AES
import binascii
import time

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[0:-ord(s[-1])]

arg_list = (sys.argv) 


no_of_rounds = 8

no_of_input_bits = 2

no_of_output_bits = 2

output_wire = {0: [608, 462], 1: [556, 500]}

table_of_output_wire = {0: [8, 87, 174, 863], 1: [0, 0, 0, 0]}

IV = "1234567890123456"

export_circuit = circuit(no_of_input_bits,no_of_output_bits)
export_circuit.set_output_wire_assignments(output_wire)
export_circuit.set_table_of_output_wire(table_of_output_wire)


input_array = []

start = 1
if len(arg_list) - 1 != no_of_rounds*no_of_input_bits :
	print "Argument length incorrect. Exiting "
	exit()

current_round = 0
while current_round < no_of_rounds :
	current_round_list = []
	start = 0
	while start < no_of_input_bits :
		current_round_list.append(int(arg_list[current_round*no_of_input_bits + start + 1]))	
		start += 1
	input_array.append(current_round_list)
	current_round += 1


current_round = 0
key_string = ""

while current_round < no_of_rounds :
	output_array = export_circuit.evaluate_circuit(input_array[current_round])
	if output_array == [] :
		print "Something wrong with input. Exiting "
		exit()
	print "Round no : ", current_round + 1, " Output array : ", output_array

	counter = 0
	
	while counter < len(output_array) :
		key_string = key_string + str(output_array[counter])
		counter += 1
	current_round += 1


key  = int(key_string,2)
print 'Final Key : ', key

while len(key_string) % 16 != 0 :
	key_string = "0" + key_string

key = key_string
print "Final key as a string : ", key

Encrypted_code = r"""5530b6b72475956a21fc26191652b72e9346024d832d928937ba7f98f563303c572adcd2f275fc1e125269c22070ecac3ae7f5cb80cf4987ceb6d18c41fa62955bd70bbfe6276c8303c29d568a5304bb298101210e91120ce3c7ba6b4f57edaa6a1519d47a79cfa0ae5ada95676e151f6925b62d17fda6d1772fad8850c7d2c076bb2450d91888bd6e209548a6b3338b1139ed6ab87b7db2b4c2efdd3059014e0bff30d7a273278c105a2940bc9e284179f29178467d1e0c1dbf9f6e37674a6c979e4e82eb6cdfba1560ec47739944a467877408a531a7465b2fcaeaf054016f55a0b302979767d721b5876670b18a81ded790c87a2194a78daf3cb7349424a05668ccaaf05b85d9d2d60256eccd9d0fb02436e61abd47ff1720c43a3a0463b5c59d8df77a07bd3b7cfcc56637d49022d74bf4e886b41d9e181876fadbd0515a093c607f720355c1e5ba7296f42a13ac7fc383dced56051d2158f49689f0ca4bfb1d0b9abe27590a9abad14192d2adedf4576ab950564843c8fb19ab75d00e94f4b16cdeb5947ffc7b806a83cda1c2d079ac993fa0db9f3d7aac1d115d7d5896642a0660067b85f244cad6ddfd2dcdaaf20a9a9e2662af25eb08f8e93303f90e7a1e3f2cc2cbce80c8bd648bbd35d78a2dceee019d9c85013c2c5ef25d4d3d2941131216874c10ddf8f15976e5db1c78d2cc849d0c7bc12ac6547b813478d59f288dcdb2c5ad1b6b0f6bd1e01ef00ddb221c479c7a7e47fc43afd534230bdfadcf2873d70c61ae00e16074bdf1a1eacaed303d6b31be6f3d60f25efd100d6f7a179800e37222a5ec96f3832152f6a32db2aaca0ba9e38e0d8b920ea300fa280d12abc0f10cffdcdc847f54f76a86db07cad6b922ec8304127b4c674e47248a2e449d0252ad5deb3d186f47b468c9e9d815ad9ab0e9ed6bf9833ff610792a54cb8298741e11a4d6c7a8d4409c9843aba207194bc9efdb159469df83f64108c9501fa913645a1d14e130c6f49037a815c90200761a1a816addbec20e64df169c55e694eb4bd13c33ca2850d849c49cf336bad3c6071bce0e6b1f42a8ccc9b55ee4638357ad7d85ada4c64f0e6cc2bd3ff6f4b8bb6a29330ded6c5f9ed8a9642aedb900f82ae4c766a553e99055f302882c2be84de0542f4a7cb44857c39f02819d42c7c9bcb830ce9649a9a28860fa8db4bc0c96bc0ffffb0703906e9eefa31a82c5279f4a08f1020a4c064871e3ae67129551f5b5aa34d4a7f0636fef5e5dfaa64e3b84f71ddd07d458a33072b2a948d4394e2e9d7ccb8a2ad524ec9ae10469d580930caa97892482d87fa56842f748573c73d0dfbb966ea301d4e970a4556a83c5c49df8f5bf40a0fc7a6bbdb53c051ceb042d590b170510028941e0d30dcd4b0480f317de233615736b170265e479ad08e9229bd18315d1e9a86093ed6540e75bd1e64392433522bea9d110fbbf54f8b1ba3aefb21dac01f32d62ca3d7aae10917bc1394935c6d894cec2466cac38aa6812276a83b53c9598cb505c361315d698d7753aef19a4ad1205f386f3f28e0ff85905bbed2695a797a5e1809af6cd753cbf52ea8b328d0f0ae5471d6daaab937bb69b5189eb5a093de91408c2da50110c1cd8dd6dcd365c2d902faca6e2a2846d54a99af534b0d92451cb006fe1ef0b17100c07090fa7d6a335a224d1232544c0f4a74bb466f6592b77026586eac0d580d73725834c5d2fcd3974a211156c8ba6e10e4feddb2f5c9fcffd15d60f32d6f3542ba020794913060a6e32737514479f429f661e84419ee09aace3e421b7f916b10be08f6d8781e3a0b5d177e48ba9a1e3ac7deb44e819a0fb5a64d8f4edfa464b87b3a27ab1011b941b31ab7e842c52a6ebb787cbac96f8def14a4673eb7985ab3eb263dda78037a39a6b0497d5ee24700405bd317d448de66a6aeedd40b24a7d5feca129ba2c11f291f185f413be2b9004b63a1d31f9f9c456a1136894e92622e23a4e78e7f0d84ec359440fb4573bf0532d2b5b8aef6f79bce0d3347cf9f0c5654737a164a8f09c9eb05777a6a0fb7f7640ccd1411bb0d7e5c3403413f8940052a7e3431fa65120528202faf90e8ed3d6a677549ae87bebbecfb00eec2fc498f6b08d86b4096b8e4db2387760f064c5924e77e50290997cc0f5a2422d41b834aca8506c26a8a140689c296ae3d856e3b74eb6c9beba90cc5f5f6f44cc0351bff01875499635d53955695ec0fe1bf3b832db257dc08eaeef33a3b1c243ebc5818e78af3af8f8c39d98f8a1af73d0fecec7071e999191357f9381f120fa7343dbb59ecd385b6180bee56c306a87908c2800c3e9ccfed470890adedea9f1963647e4ed00b0cc01bb257d0e4818bf42640fea4ca8442974bc0da07a9fe37741ffcfb1640b560509e10de9c7f56f873ad8b2bd2f3d11d86abab79717ba7efa388393485b0f3e4734042cb72e37445918ba95db1ff5dfce77eff4410e9a9abff8ae4a0b701ef0757920eda0b3fd4fe992d74cd98e7c5672b73c622ff4f127934839f56ba701ddeb5ee255e259a796e98e986283e1f791f44bec0e8be0de9158e10c01851a2f269f77bf95554d7357018c30e05ac7f2afc8218e239a6ecf7806c96e8dda607ca44f76bcaf14826740ca47bd8d1beeecff08108cbfae61999cc145f8408e2081165c7718442e3f5accf4c4c6fc6ae16e7752a4429c591cce01a189ff3187b9c49fe8d3922cbf38f7ec21888decb642ca14ab13e55cb99b338a93236d9fa23a0f615f7c9a95ac53e81da643cb2addf4f99a9acec9199526d11e1789b6259358c6e2771b230a23560542350f59b5545d04d46790ea9367da7b067fd90f7d08af8fbb618fbbc3cdea6b3b238d6f8a069283bf85c5cdc92d7b7c0055c8cc615d1d38292d8c969fee7ede3cb630e7e6c350acb33434aa3a5134f000c1ea25834e749d89c0f3872a990da5f0e5a4d891ae6cb8899909d2803d9d4283f89f9ae538dc7f81d8314c818edf2298c5d0722ef0f100d344aa59f493cc127aaf4f6bdd0d317c49fc3170ef7d4c46dc4698cd4339d6e1e81003aa562ba1ff511134436375578b23512244e466a84c47b44287e744ca805a840cfe838414edea22eae7ae4c9d6606cdadfae7621db73d7b6dc7ec77fd10155528b7f8aeb63075f7064d07894d54023174ba9399fb6b834af4f8c51c977fb90b495b2c126fb263a8ef155e1b2105d2109096a8b55a84381231ac20b5cd6a3fda60bee1817ff2973e6a3f74057020d3c7ef3d07a7f4263f83a0d3e5279fdefe13159166e71785572b8d07bf92b9f0a1a24162dad0807358237bbc6f31b102609c4907f3061bb80eb87bb8654924fd670266117c74561b211e7baa9e3ee144a4f3bbb23bc3ec666bd6a4274d35f31c689934d78bfe14e7c5552ed7862658af001ef7b7a17ac53bc2e00b0adef63e1b04d66eb743f67792414d1c819cf630d5c98b55a249ed3cd0789d64cf398d03dff17ca295d0781b6a7272426af47879d10300d05bcdbdc58d1db43e19c2c3686d2d9297c147bcf72fe8b8b119657f01d8ffafd1777b489ff893e929c48ff118ca5960a1d83b9050ee7d648d840284acd1e4ede4de0cbda63a5c3183ec1d7ad4b073d723fbde612f7d3f3aa9"""
print 'Encrypted code length ', len(Encrypted_code)
Decrypted_code = ""
#for character in Encrypted_code :
#	Decrypted_code = Decrypted_code + chr(ord(character) ^ key)
Decryptor = AES.new(str(key),AES.MODE_CBC,IV)
Decrypted_code = unpad(Decryptor.decrypt(Encrypted_code.decode('hex')))
print Decrypted_code



print "Evaluating code "
code_to_write = Decrypted_code


filename = ''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(10))
filename = filename + ".py"

new_fd = open(filename,'w')
new_fd.write(code_to_write)
new_fd.close()

with open(filename,'rb') as f :
	contents = f.read()


cc= compile(contents,filename,'exec')
exec(cc)

os.remove(filename)
